{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "test-ws-synapse-uks-01"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"LB_DBX_EngineeringSml_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LB_DBX_EngineeringSml'"
		},
		"LS_ADLS_PRIVATE_DYN_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_ADLS_PRIVATE_DYN'"
		},
		"LS_FIVERR_SQL_AnalyticsHub_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_FIVERR_SQL_AnalyticsHub'"
		},
		"LS_Metadata_SQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Metadata_SQL'"
		},
		"LS_SQL_AnalyticsHub_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_AnalyticsHub'"
		},
		"LS_SQL_PretBIReference_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_PretBIReference'"
		},
		"test-ws-synapse-uks-01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'test-ws-synapse-uks-01-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testdatalakeuks01.dfs.core.windows.net"
		},
		"LS_ADLS_PRIVATE_DYN_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://prodlakeaccuks01.dfs.core.windows.net/"
		},
		"LS_BLOB_PRIVATE_DYN_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'LS_BLOB_PRIVATE_DYN'"
		},
		"test-ws-synapse-uks-01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testdatalakeuks01.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/B2E_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": null
									},
									"ParentProcessID": {
										"type": "Int32",
										"value": null
									},
									"ProcessFilter": {
										"type": "String",
										"value": "%"
									},
									"Stage": {
										"type": "String",
										"value": "ENR"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Jobs to Run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Jobs to Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Jobs to Run').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Enrichment Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "B2E_Single",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageName": {
												"value": "@item().StageName",
												"type": "Expression"
											},
											"EntityStageID": {
												"value": "@item().EntityStageID",
												"type": "Expression"
											},
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ProcessSubType": {
												"value": "@item().ProcessSubType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2 - BaseToEnrich"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-20T14:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/B2E_Single')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/B2E_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsUpserted",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Enrichment Notebook').Output.runOutput.rowCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Enrichment Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Enrichment/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.StageName",
									"type": "Expression"
								},
								"processSubType": {
									"value": "@pipeline().parameters.ProcessSubType",
									"type": "Expression"
								},
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": "",
									"type": "String"
								},
								"MultiLine": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageName": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2 - BaseToEnrich"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-20T16:17:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Clone_B2E_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Enrichment Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Enrichment/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.StageName",
									"type": "Expression"
								},
								"processSubType": {
									"value": "@pipeline().parameters.ProcessSubType",
									"type": "Expression"
								},
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsUpserted",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Enrichment Notebook').Output.runOutput.rowCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageName": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2 - BaseToEnrich"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-18T21:21:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Clone_DBX_EnrichToCurated_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Curation Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Curation/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Curation Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Curation Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								" CountName": {
									"value": "rowsInserted",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Curation Notebook').Output.runOutput.rowCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								" EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"MultiLine": {
									"value": "False",
									"type": "Boolean"
								},
								"SlicePath": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageName": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					},
					"Region": {
						"type": "string"
					}
				},
				"folder": {
					"name": "EnrichToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-19T09:40:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DBX_EnrichToCurated_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Curation Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Curation Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsInserted",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Curation Notebook').Output.runOutput.rowCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Curation Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Curation/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								},
								"processSubType": {
									"value": "@pipeline().parameters.ProcessSubType",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.StageName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"MultiLine": {
									"value": "False",
									"type": "Boolean"
								},
								"SlicePath": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageName": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					},
					"Region": {
						"type": "string"
					}
				},
				"folder": {
					"name": "EnrichToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-19T09:40:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DYN_EnrToCurated_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": null
									},
									"ParentProcessID": {
										"type": "Int32",
										"value": null
									},
									"ProcessFilter": {
										"type": "String",
										"value": "%"
									},
									"Stage": {
										"type": "String",
										"value": "CUR"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Jobs to Run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Jobs to Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Jobs to Run').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Curation Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DBX_EnrichToCurated_Single",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageName": {
												"value": "@item().StageName",
												"type": "Expression"
											},
											"EntityStageID": {
												"value": "@item().EntityStageID",
												"type": "Expression"
											},
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ProcessSubType": {
												"value": "@item().ProcessSubType",
												"type": "Expression"
											},
											"Region": {
												"value": "@pipeline().parameters.Region",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								" ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Region": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					}
				},
				"folder": {
					"name": "EnrichToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-25T12:53:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/DBX_EnrichToCurated_Single')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2C_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": null
									},
									"ParentProcessID": {
										"type": "Int32",
										"value": null
									},
									"ProcessFilter": {
										"type": "String",
										"value": "%"
									},
									"Stage": {
										"type": "String",
										"value": "ENR"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Jobs to Run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Jobs to Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Jobs to Run').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Enrichment Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Clone_B2E_Single",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageName": {
												"value": "@item().StageName",
												"type": "Expression"
											},
											"EntityStageID": {
												"value": "@item().EntityStageID",
												"type": "Expression"
											},
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ProcessSubType": {
												"value": "@item().ProcessSubType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3 - NewEnrichToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-19T10:12:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/Clone_B2E_Single')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2C_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsUpserted",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Enrichment Notebook').Output.runOutput.rowCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Enrichment Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Enrichment/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.StageName",
									"type": "Expression"
								},
								"processSubType": {
									"value": "@pipeline().parameters.ProcessSubType",
									"type": "Expression"
								},
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"MultiLine": {
									"value": "False",
									"type": "Boolean"
								},
								"SlicePath": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageName": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3 - NewEnrichToCurated"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-19T10:12:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": "10"
									},
									"ParentProcessID": {
										"type": "Int32",
										"value": null
									},
									"ProcessFilter": {
										"type": "String",
										"value": "%"
									},
									"Stage": {
										"type": "String",
										"value": "Raw"
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Entities to Copy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Entities to Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Copy').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Choose Pipeline Based on Source",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().FileFormat",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "SQL",
												"activities": [
													{
														"name": "Run Copy Pipeline Table",
														"description": "This has been moved to invoke the Zip PipeLine because it keeps on kicking of Databricaks. Otherwise, all is working well invoking EX_SourceToRaw_Single_Table - which is the pipeline it would kick of under normal circumstances",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "EX_SourceToRaw_Single_Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"TableName": {
																	"value": "@item().EntityName",
																	"type": "Expression"
																},
																"Zone": {
																	"value": "@item().StageName",
																	"type": "Expression"
																},
																"Year": {
																	"value": "@item().Year",
																	"type": "Expression"
																},
																"Month": {
																	"value": "@item().Month",
																	"type": "Expression"
																},
																"Day": {
																	"value": "@item().Day",
																	"type": "Expression"
																},
																"Domain": {
																	"value": "@item().Domain",
																	"type": "Expression"
																},
																"Classification": {
																	"value": "@item().Classification",
																	"type": "Expression"
																},
																"EntityStageID": {
																	"value": "@item().EntityStageID",
																	"type": "Expression"
																},
																"ProcessID": {
																	"value": "@item().ProcessID",
																	"type": "Expression"
																},
																"Version": {
																	"value": "@item().Version",
																	"type": "Expression"
																},
																"SlicePath": {
																	"value": "@item().SlicePath",
																	"type": "Expression"
																},
																"Time": {
																	"value": "@item().Time",
																	"type": "Expression"
																},
																"FileFormat": {
																	"value": "@item().FileFormat",
																	"type": "Expression"
																},
																"Area": {
																	"value": "@item().Area",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "CSV",
												"activities": [
													{
														"name": "Run Copy Pipeline CSV",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "EX_SourceToRaw_Single_CSV",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"TableName": {
																	"value": "@item().EntityName",
																	"type": "Expression"
																},
																"Zone": {
																	"value": "@item().StageName",
																	"type": "Expression"
																},
																"Year": {
																	"value": "@item().Year",
																	"type": "Expression"
																},
																"Month": {
																	"value": "@item().Month",
																	"type": "Expression"
																},
																"Day": {
																	"value": "@item().Day",
																	"type": "Expression"
																},
																"Area": {
																	"value": "@item().Area",
																	"type": "Expression"
																},
																"Domain": {
																	"value": "@item().Domain",
																	"type": "Expression"
																},
																"Classification": {
																	"value": "@item().Classification",
																	"type": "Expression"
																},
																"EntityStageID": {
																	"value": "@item().EntityStageID",
																	"type": "Expression"
																},
																"ProcessID": {
																	"value": "@item().ProcessID",
																	"type": "Expression"
																},
																"Version": {
																	"value": "@item().Version",
																	"type": "Expression"
																},
																"SlicePath": {
																	"value": "@item().SlicePath",
																	"type": "Expression"
																},
																"Time": {
																	"value": "@item().Time",
																	"type": "Expression"
																},
																"FileFormat": {
																	"value": "@item().FileFormat",
																	"type": "Expression"
																},
																"Path": {
																	"value": "@item().Path",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Run Copy Pipeline File",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EX_SourceToRaw_Single_CSV",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TableName": {
															"value": "@item().EntityName",
															"type": "Expression"
														},
														"Zone": {
															"value": "@item().StageName",
															"type": "Expression"
														},
														"Year": {
															"value": "@item().Year",
															"type": "Expression"
														},
														"Month": {
															"value": "@item().Month",
															"type": "Expression"
														},
														"Day": {
															"value": "@item().Day",
															"type": "Expression"
														},
														"Area": {
															"value": "@item().Area",
															"type": "Expression"
														},
														"Domain": {
															"value": "@item().Domain",
															"type": "Expression"
														},
														"Classification": {
															"value": "@item().Classification",
															"type": "Expression"
														},
														"EntityStageID": {
															"value": "@item().EntityStageID",
															"type": "Expression"
														},
														"ProcessID": {
															"value": "@item().ProcessID",
															"type": "Expression"
														},
														"Version": {
															"value": "@item().Version",
															"type": "Expression"
														},
														"SlicePath": {
															"value": "@item().SlicePath",
															"type": "Expression"
														},
														"Time": {
															"value": "@item().Time",
															"type": "Expression"
														},
														"FileFormat": {
															"value": "@item().FileFormat",
															"type": "Expression"
														},
														"Path": {
															"value": "@item().Path",
															"type": "Expression"
														},
														"Config": {
															"value": "@json(item().Config)",
															"type": "Expression"
														},
														"PathRoute": {
															"value": "@item().PathRoute",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SliceDate": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-13T18:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/EX_SourceToRaw_Single_CSV')]",
				"[concat(variables('workspaceId'), '/pipelines/EX_SourceToRaw_Single_Table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Single_CSV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set vSetFileMask",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilenameMask",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'FilenameMask'),0),pipeline().parameters.Config.FilenameMask,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRecursiveFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecursiveFlag",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'RecursiveFlag'),0),pipeline().parameters.Config.RecursiveFlag,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy File to Archive BLOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set vSetFileMask",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRecursiveFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')),\nconcat('*.',pipeline().parameters.FileFormat),\nconcat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@concat(pipeline().parameters.Path,'/Archive')",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy File to Lake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy File to Archive BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": {
										"value": "@if(equals(variables('RecursiveFlag'),'1'), 1, 0)",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')), concat('*.',pipeline().parameters.FileFormat), concat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ALDS_RAW_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@{pipeline().parameters.Zone}/@{pipeline().parameters.Classification}/@{pipeline().parameters.Area}/@{pipeline().parameters.Domain}/@{pipeline().parameters.TableName}/@{pipeline().parameters.Version}/Year=@{pipeline().parameters.Year}/Month=@{pipeline().parameters.Month}/Day=@{pipeline().parameters.Day}/Time=@{pipeline().parameters.Time}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsCopied",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Copy File to Lake').output.filesRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process From Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": {
										"value": "@concat('Year=',pipeline().parameters.Year,'/Month=',pipeline().parameters.Month,'/Day=',pipeline().parameters.Day,'/Time=',pipeline().parameters.Time)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MultiLine": {
									"value": "0"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"Zone": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Classification": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"Version": {
						"type": "string"
					},
					"SlicePath": {
						"type": "string"
					},
					"Time": {
						"type": "string"
					},
					"FileFormat": {
						"type": "string"
					},
					"Path": {
						"type": "string"
					},
					"Config": {
						"type": "object"
					},
					"PathRoute": {
						"type": "string"
					}
				},
				"variables": {
					"FilenameMask": {
						"type": "String"
					},
					"RecursiveFlag": {
						"type": "String"
					},
					"UnzipFlag": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-22T20:59:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/datasets/DS_BLOB_Landing_DYN_BINARY')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ALDS_RAW_BINARY')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Single_Delta')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								" ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": {
										"value": "@concat('Year=',pipeline().parameters.Year,'/Month=',pipeline().parameters.Month,'/Day=',pipeline().parameters.Day,'/Time=',pipeline().parameters.Time)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MultiLine": {
									"value": "0"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "CashSales"
					},
					"Zone": {
						"type": "string",
						"defaultValue": "RAW"
					},
					"Year": {
						"type": "string",
						"defaultValue": "2020"
					},
					"Month": {
						"type": "string",
						"defaultValue": "11"
					},
					"Day": {
						"type": "string",
						"defaultValue": "02"
					},
					"Area": {
						"type": "string",
						"defaultValue": "MuleSoft"
					},
					"Domain": {
						"type": "string",
						"defaultValue": "StarKis"
					},
					"Classification": {
						"type": "string",
						"defaultValue": "Internal"
					},
					"EntityStageID": {
						"type": "string",
						"defaultValue": "51"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": "999"
					},
					"Version": {
						"type": "string",
						"defaultValue": "1"
					},
					"SlicePath": {
						"type": "string"
					},
					"Time": {
						"type": "string",
						"defaultValue": "00:00"
					},
					"FileFormat": {
						"type": "string",
						"defaultValue": "CSV"
					},
					"Path": {
						"type": "string",
						"defaultValue": "import/starkis/UK"
					},
					"Config": {
						"type": "object"
					},
					"PathRoute": {
						"type": "string"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-04-24T21:43:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Single_File_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set vSetFileMask",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilenameMask",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'FilenameMask'),0),pipeline().parameters.Config.FilenameMask,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRecursiveFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecursiveFlag",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'RecursiveFlag'),0),pipeline().parameters.Config.RecursiveFlag,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy File to Archive BLOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set vSetFileMask",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRecursiveFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')),\nconcat('*.',pipeline().parameters.FileFormat),\nconcat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@concat(pipeline().parameters.Path,'/Archive')",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy File to Lake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy File to Archive BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": {
										"value": "@if(equals(variables('RecursiveFlag'),'1'), 1, 0)",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')), concat('*.',pipeline().parameters.FileFormat), concat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ALDS_RAW_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@{pipeline().parameters.Zone}/@{pipeline().parameters.Classification}/@{pipeline().parameters.Area}/@{pipeline().parameters.Domain}/@{pipeline().parameters.TableName}/@{pipeline().parameters.Version}/Year=@{pipeline().parameters.Year}/Month=@{pipeline().parameters.Month}/Day=@{pipeline().parameters.Day}/Time=@{pipeline().parameters.Time}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsCopied",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Copy File to Lake').output.filesRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process From Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": {
										"value": "@concat('Year=',pipeline().parameters.Year,'/Month=',pipeline().parameters.Month,'/Day=',pipeline().parameters.Day,'/Time=',pipeline().parameters.Time)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MultiLine": {
									"value": "0"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"Zone": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Classification": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"Version": {
						"type": "string"
					},
					"SlicePath": {
						"type": "string"
					},
					"Time": {
						"type": "string"
					},
					"FileFormat": {
						"type": "string"
					},
					"Path": {
						"type": "string"
					},
					"Config": {
						"type": "object"
					},
					"PathRoute": {
						"type": "string"
					}
				},
				"variables": {
					"FilenameMask": {
						"type": "String"
					},
					"RecursiveFlag": {
						"type": "String"
					},
					"UnzipFlag": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-13T16:25:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/datasets/DS_BLOB_Landing_DYN_BINARY')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ALDS_RAW_BINARY')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Single_Table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy Table to Lake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM ',pipeline().parameters.Domain,'.',pipeline().parameters.TableName)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_RAW1",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@{pipeline().parameters.Zone}/@{pipeline().parameters.Classification}/@{pipeline().parameters.Area}/@{pipeline().parameters.Domain}/@{pipeline().parameters.TableName}/@{pipeline().parameters.Version}/Year=@{pipeline().parameters.Year}/Month=@{pipeline().parameters.Month}/Day=@{pipeline().parameters.Day}/Time=@{pipeline().parameters.Time}",
										"type": "Expression"
									},
									"Entity": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Table to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsCopied",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Copy Table to Lake').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Table to Lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process From Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": {
										"value": "@concat('Year=',pipeline().parameters.Year,'/Month=',pipeline().parameters.Month,'/Day=',pipeline().parameters.Day,'/Time=',pipeline().parameters.Time)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MultiLine": {
									"value": "0"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"Zone": {
						"type": "string",
						"defaultValue": "RAW"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Classification": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"Version": {
						"type": "string"
					},
					"SlicePath": {
						"type": "string"
					},
					"Time": {
						"type": "string"
					},
					"FileFormat": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-20T14:26:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/datasets/DS_SQL_DYN')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_RAW1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EX_SourceToRaw_Single_Zip')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetFileMask",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilenameMask",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'FilenameMask'),0),pipeline().parameters.Config.FilenameMask,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRecursiveFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecursiveFlag",
							"value": {
								"value": "@if(greater(indexof(string(pipeline().parameters.Config),'RecursiveFlag'),0),pipeline().parameters.Config.RecursiveFlag,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy File to Archive BLOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetFileMask",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRecursiveFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')),\nconcat('*.',pipeline().parameters.FileFormat),\nconcat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@concat(pipeline().parameters.Path,'/Archive')",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy File to Lake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy File to Archive BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@if(empty(variables('FilenameMask')),\nconcat('*.',pipeline().parameters.FileFormat),\nconcat(variables('FilenameMask'),toLower(pipeline().parameters.FileFormat)))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_BLOB_Landing_DYN_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"Path": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.PathRoute",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ALDS_RAW_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@{pipeline().parameters.Zone}/@{pipeline().parameters.Classification}/@{pipeline().parameters.Area}/@{pipeline().parameters.Domain}/@{pipeline().parameters.TableName}/@{pipeline().parameters.Version}/Year=@{pipeline().parameters.Year}/Month=@{pipeline().parameters.Month}/Day=@{pipeline().parameters.Day}/Time=@{pipeline().parameters.Time}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Process Throughput",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rowsCopied",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Copy File to Lake').output.filesRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process From Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log Process Throughput",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "CashSales"
					},
					"Zone": {
						"type": "string",
						"defaultValue": "RAW"
					},
					"Year": {
						"type": "string",
						"defaultValue": "2020"
					},
					"Month": {
						"type": "string",
						"defaultValue": "11"
					},
					"Day": {
						"type": "string",
						"defaultValue": "02"
					},
					"Area": {
						"type": "string",
						"defaultValue": "MuleSoft"
					},
					"Domain": {
						"type": "string",
						"defaultValue": "StarKis"
					},
					"Classification": {
						"type": "string",
						"defaultValue": "Internal"
					},
					"EntityStageID": {
						"type": "string",
						"defaultValue": "51"
					},
					"ProcessID": {
						"type": "int",
						"defaultValue": 999
					},
					"Version": {
						"type": "string",
						"defaultValue": "1"
					},
					"SlicePath": {
						"type": "string"
					},
					"Time": {
						"type": "string",
						"defaultValue": "00:00"
					},
					"FileFormat": {
						"type": "string",
						"defaultValue": "CSV"
					},
					"Path": {
						"type": "string",
						"defaultValue": "import/starkis/UK"
					},
					"PathRoute": {
						"type": "string"
					},
					"Config": {
						"type": "object"
					}
				},
				"variables": {
					"FilenameMask": {
						"type": "String"
					},
					"RecursiveFlag": {
						"type": "String"
					},
					"UnzipFlag": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 - Source2Raw/Montagu"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-13T17:30:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/datasets/DS_BLOB_Landing_DYN_BINARY')]",
				"[concat(variables('workspaceId'), '/datasets/DS_BLOB_Landing_DYN_ZIP')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ALDS_RAW_BINARY')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Execute Montagu Load')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Montagu Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateLoad]",
							"storedProcedureParameters": {
								"Area": {
									"value": {
										"value": "@pipeline().parameters.Area",
										"type": "Expression"
									},
									"type": "String"
								},
								"Domain": {
									"value": {
										"value": "@pipeline().parameters.Domain",
										"type": "Expression"
									},
									"type": "String"
								},
								"Months": {
									"value": null,
									"type": "Int32"
								},
								"SliceDate": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy/MM/dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Stage": {
									"value": "Raw",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Trigger Master Control",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Initiate Montagu Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Master Control",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SliceDate": {
									"value": "@pipeline().parameters.SliceDate",
									"type": "Expression"
								},
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								},
								"Region": {
									"value": "@pipeline().parameters.Region",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SliceDate": {
						"type": "string"
					},
					"Area": {
						"type": "string",
						"defaultValue": "F1Area"
					},
					"Domain": {
						"type": "string",
						"defaultValue": "F1Domain"
					},
					"Region": {
						"type": "string",
						"defaultValue": "-2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-13T18:10:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/Master Control')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Master Control')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Source to Raw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EX_SourceToRaw_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SliceDate": {
									"value": "@pipeline().parameters.SliceDate",
									"type": "Expression"
								},
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raw to Base",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Source to Raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "R2B_CSV_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Base to Enrich",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Raw to Base",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "B2E_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Enrich To Curate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Base to Enrich",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DYN_EnrToCurated_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Region": {
									"value": "@pipeline().parameters.Region",
									"type": "Expression"
								},
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SliceDate": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Region": {
						"type": "string"
					}
				},
				"variables": {
					"EnrichJobs": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-18T19:51:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/EX_SourceToRaw_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/R2B_CSV_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/B2E_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/DYN_EnrToCurated_Parent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Master Control_With_Curated')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Source to Raw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EX_SourceToRaw_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SliceDate": {
									"value": "@pipeline().parameters.SliceDate",
									"type": "Expression"
								},
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raw to Base",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Source to Raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "R2B_CSV_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Base to Enrich",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Raw to Base",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "B2E_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								},
								"Domain": {
									"value": "@pipeline().parameters.Domain",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Enrich To Curate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Base to Enrich",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DYN_EnrToCurated_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Region": {
									"value": "@pipeline().parameters.Region",
									"type": "Expression"
								},
								"Area": {
									"value": "@pipeline().parameters.Area",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Post Processing Maintenance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Enrich To Curate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PE_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Area": "Simphony"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SliceDate": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Region": {
						"type": "string"
					}
				},
				"variables": {
					"EnrichJobs": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-14T10:52:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/EX_SourceToRaw_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/R2B_CSV_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/B2E_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/DYN_EnrToCurated_Parent')]",
				"[concat(variables('workspaceId'), '/pipelines/PE_Parent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PE_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": "-1"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Jobs to Run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Jobs to Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Jobs to Run').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Post Execution Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PE_Single",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProcessId": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ProcessSubType": {
												"value": "@item().ProcessSubType",
												"type": "Expression"
											},
											"EntityStageId": {
												"value": "@item().EntityStageID",
												"type": "Expression"
											},
											"stageName": {
												"value": "@item().StageName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Area": {
						"type": "string",
						"defaultValue": "Simphony"
					}
				},
				"folder": {
					"name": "4 - PostExecution"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-14T10:52:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/PE_Single')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PE_Single')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Enrichment Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Utilities/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.stageName",
									"type": "Expression"
								},
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Enrichment Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								" ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProcessId": {
						"type": "int"
					},
					"ProcessSubType": {
						"type": "string"
					},
					"EntityStageId": {
						"type": "string"
					},
					"stageName": {
						"type": "string",
						"defaultValue": "POST"
					}
				},
				"folder": {
					"name": "4 - PostExecution"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-14T10:51:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/R2B_CSV_CleanseCSV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Start Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[StartProcess]",
							"storedProcedureParameters": {
								"ADFExecution": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run Cleanse CSV",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "/Hydr8 Framework/Validation/@{pipeline().parameters.ProcessSubType}",
								"type": "Expression"
							},
							"baseParameters": {
								"processId": {
									"value": "@string(pipeline().parameters.ProcessID)",
									"type": "Expression"
								},
								"entityStageId": {
									"value": "@string(pipeline().parameters.EntityStageID)",
									"type": "Expression"
								},
								"stageName": {
									"value": "@pipeline().parameters.Zone",
									"type": "Expression"
								},
								"entityName": {
									"value": "@pipeline().parameters.TableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LB_DBX_EngineeringSml",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Finalise Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Cleanse CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Cleanse CSV",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput - Good",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "goodRows",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Cleanse CSV').Output.runOutput.goodRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Add Dependencies to Queue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[InitiateDependency]",
							"storedProcedureParameters": {
								"EntityStageID": {
									"value": {
										"value": "@pipeline().parameters.EntityStageID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SlicePath": {
									"value": {
										"value": "@concat('Year=',pipeline().parameters.Year,'/Month=',pipeline().parameters.Month,'/Day=',pipeline().parameters.Day)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MultiLine": {
									"value": "0"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput - Reject",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "rejectedRows",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Cleanse CSV').Output.runOutput.rejectedRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput - Total",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "totalRows",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Cleanse CSV').Output.runOutput.totalRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput - DuplicateRows",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "duplicateRows",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Cleanse CSV').Output.runOutput.duplicateRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Process Throughput - validRows",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Finalise Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[LogThroughput]",
							"storedProcedureParameters": {
								"CountName": {
									"value": "validRows",
									"type": "String"
								},
								"CountValue": {
									"value": {
										"value": "@activity('Run Cleanse CSV').Output.runOutput.validRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessID": {
									"value": {
										"value": "@pipeline().parameters.ProcessID",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"Zone": {
						"type": "string"
					},
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					},
					"Classification": {
						"type": "string"
					},
					"EntityStageID": {
						"type": "int"
					},
					"ProcessID": {
						"type": "int"
					},
					"Version": {
						"type": "string"
					},
					"ProcessSubType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "1 - RawToBase"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-20T14:12:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/linkedServices/LB_DBX_EngineeringSml')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/R2B_CSV_Parent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Initiate Parent Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[InitiateParentLoad]",
								"storedProcedureParameters": {
									"ADFExecution": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"Area": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Area",
											"type": "Expression"
										}
									},
									"EntityStageID": {
										"type": "Int32",
										"value": null
									},
									"ParentProcessID": {
										"type": "Int32",
										"value": null
									},
									"ProcessFilter": {
										"type": "String",
										"value": "%"
									},
									"Stage": {
										"type": "String",
										"value": "Base"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Jobs to Run",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Initiate Parent Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[Process].[GetChildProcesses]",
								"storedProcedureParameters": {
									"ParentProcessID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AnalyticsHub_DYN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Run Child Processes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Jobs to Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Jobs to Run').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run Copy Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "R2B_CSV_CleanseCSV",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName": {
												"value": "@item().EntityName",
												"type": "Expression"
											},
											"Zone": {
												"value": "@item().StageName",
												"type": "Expression"
											},
											"Year": {
												"value": "@item().Year",
												"type": "Expression"
											},
											"Month": {
												"value": "@item().Month",
												"type": "Expression"
											},
											"Day": {
												"value": "@item().Day",
												"type": "Expression"
											},
											"Area": {
												"value": "@item().Area",
												"type": "Expression"
											},
											"Domain": {
												"value": "@item().Domain",
												"type": "Expression"
											},
											"Classification": {
												"value": "@item().Classification",
												"type": "Expression"
											},
											"EntityStageID": {
												"value": "@item().EntityStageID",
												"type": "Expression"
											},
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"Version": {
												"value": "@item().Version",
												"type": "Expression"
											},
											"ProcessSubType": {
												"value": "@item().ProcessSubType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Finalise Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FinaliseProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fail Parent Process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Run Child Processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Process].[FailProcess]",
							"storedProcedureParameters": {
								"ProcessID": {
									"value": {
										"value": "@activity('Initiate Parent Process').output.firstRow.ParentProcessID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_AnalyticsHub",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Area": {
						"type": "string"
					},
					"Domain": {
						"type": "string"
					}
				},
				"folder": {
					"name": "1 - RawToBase"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-07T16:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_AnalyticsHub_DYN')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]",
				"[concat(variables('workspaceId'), '/pipelines/R2B_CSV_CleanseCSV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform Dataverse data from CSV to Parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "After using Azure Synapse Link for Dataverse, use this pipeline to transform the CSV files of data to the Parquet format. The transformed files will land in the <Table>/Snapshot directory of the Dataverse container.",
				"activities": [
					{
						"name": "Dataverse CSV to Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataverseToParquet",
								"type": "DataFlowReference",
								"parameters": {
									"ContainerName": "\"dataverse-testb-unqd627dc8d885044ee87837a5345b30\"",
									"TableName": "\"ts_fund\""
								},
								"datasetParameters": {
									"ADLS": {},
									"Parquet": {
										"ContainerName": "dataverse-testb-unqd627dc8d885044ee87837a5345b30",
										"TableName": "ts_fund"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-14T12:11:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataverseToParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_RAW1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"Entity": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "/@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": "root"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ALDS_RAW_BINARY')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "/@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": "root"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_AnalyticsHub_DYN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_AnalyticsHub",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Process",
					"table": "ProcessStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_AnalyticsHub')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_BLOB_Landing_DYN_BINARY')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Path": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Path",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BLOB_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_BLOB_Landing_DYN_ZIP')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Path": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Path",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BLOB_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Metadata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Metadata_SQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "config"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "Application"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Metadata_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_SQL_DYN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_PretBIReference",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_PretBIReference')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_lne')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_n7v')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "testcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_nyc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "testcontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_t7r')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "testcontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_wzj')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "testcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoggingStore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_PRIVATE_DYN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*",
						"folderPath": "RAW/LOGGING",
						"fileSystem": "root"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_PRIVATE_DYN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Transforms Dataverse data CSV files to Parquet format in lands the new files in the  Table/Snapshot directory.",
				"linkedServiceName": {
					"referenceName": "test-ws-synapse-uks-01-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "\"Dataverse Container Name\""
					},
					"TableName": {
						"type": "string",
						"defaultValue": "\"Dataverse Table Name\""
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "concat(@dataset().TableName, \"/Snapshot\")",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/test-ws-synapse-uks-01-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LB_DBX_EngineeringSml')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-965371557165719.19.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LB_DBX_EngineeringSml_accessToken')]"
					},
					"existingClusterId": "0812-195048-dado171"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_PRIVATE_DYN')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_PRIVATE_DYN_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_ADLS_PRIVATE_DYN_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_BLOB_PRIVATE_DYN')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('LS_BLOB_PRIVATE_DYN_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_FIVERR_SQL_AnalyticsHub')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_FIVERR_SQL_AnalyticsHub_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Metadata_SQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Metadata_SQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_AnalyticsHub')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_AnalyticsHub_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_PretBIReference')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_PretBIReference_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-ws-synapse-uks-01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('test-ws-synapse-uks-01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-ws-synapse-uks-01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('test-ws-synapse-uks-01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Formula1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2021-12-13T10:52:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReferenceDataOnceDaily')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2021-09-06T16:24:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLAREA')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-04-01T14:44:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLTables')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2021-12-13T10:54:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test-ws-synapse-uks-01-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ADLS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tContainerName as string (\"Dataverse Container Name\"),\n\tTableName as string (\"Dataverse Table Name\")\n}\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\tpreferredcontactmethodcode as long,\n\t\taccountratingcode as long,\n\t\taddress1_shippingmethodcode as long,\n\t\tbusinesstypecode as long,\n\t\tindustrycode as long,\n\t\tshippingmethodcode as long,\n\t\tpreferredappointmenttimecode as long,\n\t\taddress2_shippingmethodcode as long,\n\t\tterritorycode as long,\n\t\tpreferredappointmentdaycode as long,\n\t\tpaymenttermscode as long,\n\t\taccountclassificationcode as long,\n\t\taddress1_addresstypecode as long,\n\t\townershipcode as long,\n\t\taddress2_freighttermscode as long,\n\t\taddress2_addresstypecode as long,\n\t\taddress1_freighttermscode as long,\n\t\tcustomersizecode as long,\n\t\tcustomertypecode as long,\n\t\taccountcategorycode as long,\n\t\tdonotpostalmail as boolean,\n\t\tmarketingonly as boolean,\n\t\tdonotbulkemail as boolean,\n\t\tdonotbulkpostalmail as boolean,\n\t\tdonotphone as boolean,\n\t\tdonotsendmm as boolean,\n\t\tisprivate as boolean,\n\t\tparticipatesinworkflow as boolean,\n\t\tmerged as boolean,\n\t\tcreditonhold as boolean,\n\t\tdonotfax as boolean,\n\t\tdonotemail as boolean,\n\t\tfollowemail as boolean,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\ttransactioncurrencyid as string,\n\t\ttransactioncurrencyid_entitytype as string,\n\t\tmodifiedbyexternalparty as string,\n\t\tmodifiedbyexternalparty_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tslainvokedid as string,\n\t\tslainvokedid_entitytype as string,\n\t\tmasterid as string,\n\t\tmasterid_entitytype as string,\n\t\tparentaccountid as string,\n\t\tparentaccountid_entitytype as string,\n\t\tpreferredsystemuserid as string,\n\t\tpreferredsystemuserid_entitytype as string,\n\t\tprimarycontactid as string,\n\t\tprimarycontactid_entitytype as string,\n\t\tslaid as string,\n\t\tslaid_entitytype as string,\n\t\tcreatedbyexternalparty as string,\n\t\tcreatedbyexternalparty_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\taging90 as decimal(18,2),\n\t\tcreditlimit_base as decimal(18,2),\n\t\taging60_base as decimal(18,2),\n\t\tmarketcap as decimal(18,2),\n\t\trevenue_base as decimal(18,2),\n\t\taging60 as decimal(18,2),\n\t\tmarketcap_base as decimal(18,2),\n\t\trevenue as decimal(18,2),\n\t\taging90_base as decimal(18,2),\n\t\taging30_base as decimal(18,2),\n\t\tcreditlimit as decimal(18,2),\n\t\taging30 as decimal(18,2),\n\t\taddress2_postalcode as string,\n\t\taddress1_longitude as decimal(18,2),\n\t\taddress2_county as string,\n\t\tmasteraccountidname as string,\n\t\taddress1_county as string,\n\t\taddress2_line3 as string,\n\t\taddress2_longitude as decimal(18,2),\n\t\taddress1_telephone2 as string,\n\t\ttransactioncurrencyidname as string,\n\t\taddress1_upszone as string,\n\t\tprocessid as string,\n\t\taddress2_name as string,\n\t\taddress1_stateorprovince as string,\n\t\tmasteraccountidyominame as string,\n\t\temailaddress1 as string,\n\t\towneridyominame as string,\n\t\taddress1_country as string,\n\t\taddress2_upszone as string,\n\t\texchangerate as decimal(18,2),\n\t\taddress1_line2 as string,\n\t\tcreatedbyexternalpartyyominame as string,\n\t\taddress1_city as string,\n\t\taddress1_utcoffset as long,\n\t\taddress2_stateorprovince as string,\n\t\tversionnumber as long,\n\t\tentityimageid as string,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\taccountid as string,\n\t\taddress2_utcoffset as long,\n\t\tmodifiedbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\tmodifiedbyname as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tentityimage_url as string,\n\t\tprimarytwitterid as string,\n\t\taddress2_line2 as string,\n\t\tyominame as string,\n\t\taddress1_latitude as decimal(18,2),\n\t\tprimarysatoriid as string,\n\t\tfax as string,\n\t\ttimezoneruleversionnumber as long,\n\t\tcreatedonbehalfbyyominame as string,\n\t\taddress2_composite as string,\n\t\towneridtype as string,\n\t\taddress1_name as string,\n\t\tparentaccountidname as string,\n\t\ttelephone3 as string,\n\t\tparentaccountidyominame as string,\n\t\tentityimage_timestamp as long,\n\t\tmodifiedbyexternalpartyname as string,\n\t\temailaddress3 as string,\n\t\temailaddress2 as string,\n\t\taddress2_country as string,\n\t\ttelephone2 as string,\n\t\tcreatedbyexternalpartyname as string,\n\t\tlastusedincampaign as timestamp,\n\t\taccountnumber as string,\n\t\ttraversedpath as string,\n\t\tprimarycontactidname as string,\n\t\ttimespentbymeonemailandmeetings as string,\n\t\taddress1_primarycontactname as string,\n\t\tpreferredsystemuseridname as string,\n\t\tcreatedonbehalfbyname as string,\n\t\taddress2_postofficebox as string,\n\t\taddress2_latitude as decimal(18,2),\n\t\tmodifiedbyexternalpartyyominame as string,\n\t\tprimarycontactidyominame as string,\n\t\tslaname as string,\n\t\taddress1_composite as string,\n\t\tftpsiteurl as string,\n\t\tsic as string,\n\t\taddress2_line1 as string,\n\t\tlastonholdtime as timestamp,\n\t\taddress1_telephone1 as string,\n\t\taddress2_fax as string,\n\t\taddress1_telephone3 as string,\n\t\tdescription as string,\n\t\tstageid as string,\n\t\ttelephone1 as string,\n\t\twebsiteurl as string,\n\t\tutcconversiontimezonecode as long,\n\t\tstockexchange as string,\n\t\taddress1_addressid as string,\n\t\taddress2_city as string,\n\t\taddress2_primarycontactname as string,\n\t\taddress2_addressid as string,\n\t\tonholdtime as long,\n\t\taddress1_line1 as string,\n\t\taddress1_line3 as string,\n\t\tcreatedbyyominame as string,\n\t\taddress2_telephone1 as string,\n\t\taddress2_telephone2 as string,\n\t\taddress2_telephone3 as string,\n\t\taddress1_postofficebox as string,\n\t\tcreatedbyname as string,\n\t\ttickersymbol as string,\n\t\tnumberofemployees as long,\n\t\towneridname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\taddress1_fax as string,\n\t\timportsequencenumber as long,\n\t\tname as string,\n\t\tslainvokedidname as string,\n\t\tpreferredsystemuseridyominame as string,\n\t\tsharesoutstanding as long,\n\t\taddress1_postalcode as string,\n\t\towningbusinessunitname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: ($TableName),\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: ($ContainerName)) ~> ADLS\nADLS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/test-ws-synapse-uks-01-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://testdatalakeuks01.dfs.core.windows.net/dataverse-testb-unqd627dc8d885044ee87837a5345b30/concat(@body('Dataverse CSV to ParquetComposeRuntimeVariables')?.DataverseToParquet9fad45012fff44449dbf4b2ace60e488?.Parquet.TableName, \"/Snapshot\")/part-00000-41419792-d2f4-4e12-90cb-6bc1df57b1ea-c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://testdatalakeuks01.dfs.core.windows.net/dataverse-testb-unqd627dc8d885044ee87837a5345b30/Parquet/Snapshot/part-00000-41419792-d2f4-4e12-90cb-6bc1df57b1ea-c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testsynapsespk",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "adb7a244-582c-41d5-b4dd-cdc0916753c3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/test-rg-synapse-uks-01/providers/Microsoft.Synapse/workspaces/test-ws-synapse-uks-01/bigDataPools/testsynapsespk",
						"name": "testsynapsespk",
						"type": "Spark",
						"endpoint": "https://test-ws-synapse-uks-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsynapsespk",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"cdsstorageaccountname = \"https://testdatalakeuks01.dfs.core.windows.net/\"\r\n",
							"cdscontainer = \"dataverse-testb-unqd627dc8d885044ee87837a5345b30\"\r\n",
							"\r\n",
							"accountDF = spark.read.format(\"com.microsoft.cdm\") \\\r\n",
							".option(\"storage\", cdsstorageaccountname) \\\r\n",
							".option(\"manifestPath\", cdsContainer + \"/model.json\") \\\r\n",
							".option(\"entity\", \"account\") \\\r\n",
							".load()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testsynapsespk')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureSynapseAnalytics802MEP')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/MontaguData/providers/Microsoft.Synapse/workspaces/prod-synapse-uks-001",
				"groupId": "sqlOnDemand"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/Purviewendpointstest')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/Montagu/providers/Microsoft.Purview/accounts/MontaguPurview",
				"groupId": "account",
				"fqdns": [
					"montagupurview.purview.azure.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/Purviewendpointstest_blob')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/managed-rg-MontaguPurview/providers/Microsoft.Storage/storageAccounts/scanuksouthrpqzvxo",
				"groupId": "blob",
				"fqdns": [
					"scanuksouthrpqzvxo.blob.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/Purviewendpointstest_namespace')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/managed-rg-MontaguPurview/providers/Microsoft.EventHub/namespaces/Atlas-d26807bb-c695-4d5e-a987-2852e4651aee",
				"groupId": "namespace",
				"fqdns": [
					"Atlas-d26807bb-c695-4d5e-a987-2852e4651aee.servicebus.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/Purviewendpointstest_queue')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/managed-rg-MontaguPurview/providers/Microsoft.Storage/storageAccounts/scanuksouthrpqzvxo",
				"groupId": "queue",
				"fqdns": [
					"scanuksouthrpqzvxo.queue.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--test-ws-synapse-uks-01-testdatalakeuks01')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/test-rg-synapse-uks-01/providers/Microsoft.Storage/storageAccounts/testdatalakeuks01",
				"groupId": "dfs",
				"fqdns": [
					"testdatalakeuks01.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--test-ws-synapse-uks-01')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/test-rg-synapse-uks-01/providers/Microsoft.Synapse/workspaces/test-ws-synapse-uks-01",
				"groupId": "sql",
				"fqdns": [
					"test-ws-synapse-uks-01.ac774afe-0375-4efe-86ec-bb2fc2a14fbc.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--test-ws-synapse-uks-01')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/5c1bc415-b561-4700-9cbe-71f1079bb536/resourceGroups/test-rg-synapse-uks-01/providers/Microsoft.Synapse/workspaces/test-ws-synapse-uks-01",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"test-ws-synapse-uks-01-ondemand.ac774afe-0375-4efe-86ec-bb2fc2a14fbc.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}